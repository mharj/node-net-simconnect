process.env.NODE_ENV = 'test';
import {expect} from 'chai';
import 'mocha';
import {SimConnectSender} from '../src/SimConnectSender';

describe('test sim connect', () => {
	it('should validate open buffer', () => {
		const hexStreamReq = Buffer.from("2801000002000000010000f001000000756e69742de9ed000000000000",'hex');
		const sc = new SimConnectSender({proto: 2, name: 'unit-test'});
		const idx = sc.currentPacketIndex();
		const buffer = sc.openRaw();
		expect(buffer.length).to.be.eq(hexStreamReq.length);
		expect(Buffer.compare(buffer, hexStreamReq)).to.be.eq(0);
		expect(buffer.readInt16LE(12)).to.be.eq(idx); // packet index
		expect(sc.currentPacketIndex()).to.be.eq(idx + 1);
		// const hexStreamRes = "3401000004000000020000004d6963726f736f667420466c696768742053696d756c61746f7220580000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000a0000000000000097f40000000000000a0000000000000097f40000000000004301000000000000";

	});
});
